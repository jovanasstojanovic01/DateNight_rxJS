(()=>{"use strict";function e(e){return"function"==typeof e}function t(t){return function(n){if(function(t){return e(null==t?void 0:t.lift)}(n))return n.lift((function(e){try{return t(e,this)}catch(e){this.error(e)}}));throw new TypeError("Unable to lift unknown Observable type")}}var n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},n(e,t)};function r(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}var o=function(){return o=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},o.apply(this,arguments)};function i(e,t){var n,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(c){return function(s){return function(c){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,c[0]&&(u=0)),u;)try{if(n=1,r&&(o=2&c[0]?r.return:c[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,c[1])).done)return o;switch(r=0,o&&(c=[2&c[0],o.value]),c[0]){case 0:case 1:o=c;break;case 4:return u.label++,{value:c[1],done:!1};case 5:u.label++,r=c[1],c=[0];continue;case 7:c=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==c[0]&&2!==c[0])){u=0;continue}if(3===c[0]&&(!o||c[1]>o[0]&&c[1]<o[3])){u.label=c[1];break}if(6===c[0]&&u.label<o[1]){u.label=o[1],o=c;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(c);break}o[2]&&u.ops.pop(),u.trys.pop();continue}c=t.call(e,u)}catch(e){c=[6,e],r=0}finally{n=o=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,s])}}}function u(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function c(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),u=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)u.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return u}function s(e,t,n){if(n||2===arguments.length)for(var r,o=0,i=t.length;o<i;o++)!r&&o in t||(r||(r=Array.prototype.slice.call(t,0,o)),r[o]=t[o]);return e.concat(r||Array.prototype.slice.call(t))}function a(e){return this instanceof a?(this.v=e,this):new a(e)}function l(e){var t=e((function(e){Error.call(e),e.stack=(new Error).stack}));return t.prototype=Object.create(Error.prototype),t.prototype.constructor=t,t}Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError;var f=l((function(e){return function(t){e(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(e,t){return t+1+") "+e.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t}}));function d(e,t){if(e){var n=e.indexOf(t);0<=n&&e.splice(n,1)}}var p=function(){function t(e){this.initialTeardown=e,this.closed=!1,this._parentage=null,this._finalizers=null}return t.prototype.unsubscribe=function(){var t,n,r,o,i;if(!this.closed){this.closed=!0;var a=this._parentage;if(a)if(this._parentage=null,Array.isArray(a))try{for(var l=u(a),d=l.next();!d.done;d=l.next())d.value.remove(this)}catch(e){t={error:e}}finally{try{d&&!d.done&&(n=l.return)&&n.call(l)}finally{if(t)throw t.error}}else a.remove(this);var p=this.initialTeardown;if(e(p))try{p()}catch(e){i=e instanceof f?e.errors:[e]}var h=this._finalizers;if(h){this._finalizers=null;try{for(var y=u(h),b=y.next();!b.done;b=y.next()){var m=b.value;try{v(m)}catch(e){i=null!=i?i:[],e instanceof f?i=s(s([],c(i)),c(e.errors)):i.push(e)}}}catch(e){r={error:e}}finally{try{b&&!b.done&&(o=y.return)&&o.call(y)}finally{if(r)throw r.error}}}if(i)throw new f(i)}},t.prototype.add=function(e){var n;if(e&&e!==this)if(this.closed)v(e);else{if(e instanceof t){if(e.closed||e._hasParent(this))return;e._addParent(this)}(this._finalizers=null!==(n=this._finalizers)&&void 0!==n?n:[]).push(e)}},t.prototype._hasParent=function(e){var t=this._parentage;return t===e||Array.isArray(t)&&t.includes(e)},t.prototype._addParent=function(e){var t=this._parentage;this._parentage=Array.isArray(t)?(t.push(e),t):t?[t,e]:e},t.prototype._removeParent=function(e){var t=this._parentage;t===e?this._parentage=null:Array.isArray(t)&&d(t,e)},t.prototype.remove=function(e){var n=this._finalizers;n&&d(n,e),e instanceof t&&e._removeParent(this)},t.EMPTY=((n=new t).closed=!0,n),t;var n}(),h=p.EMPTY;function y(t){return t instanceof p||t&&"closed"in t&&e(t.remove)&&e(t.add)&&e(t.unsubscribe)}function v(t){e(t)?t():t.unsubscribe()}var b={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},m={setTimeout:function(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var o=m.delegate;return(null==o?void 0:o.setTimeout)?o.setTimeout.apply(o,s([e,t],c(n))):setTimeout.apply(void 0,s([e,t],c(n)))},clearTimeout:function(e){var t=m.delegate;return((null==t?void 0:t.clearTimeout)||clearTimeout)(e)},delegate:void 0};function w(e){m.setTimeout((function(){var t=b.onUnhandledError;if(!t)throw e;t(e)}))}function g(){}var x=E("C",void 0,void 0);function E(e,t,n){return{kind:e,value:t,error:n}}var S=null;function T(e){if(b.useDeprecatedSynchronousErrorHandling){var t=!S;if(t&&(S={errorThrown:!1,error:null}),e(),t){var n=S,r=n.errorThrown,o=n.error;if(S=null,r)throw o}}else e()}var C=function(e){function t(t){var n=e.call(this)||this;return n.isStopped=!1,t?(n.destination=t,y(t)&&t.add(n)):n.destination=j,n}return r(t,e),t.create=function(e,t,n){return new L(e,t,n)},t.prototype.next=function(e){this.isStopped?P(function(e){return E("N",e,void 0)}(e),this):this._next(e)},t.prototype.error=function(e){this.isStopped?P(E("E",void 0,e),this):(this.isStopped=!0,this._error(e))},t.prototype.complete=function(){this.isStopped?P(x,this):(this.isStopped=!0,this._complete())},t.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this),this.destination=null)},t.prototype._next=function(e){this.destination.next(e)},t.prototype._error=function(e){try{this.destination.error(e)}finally{this.unsubscribe()}},t.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},t}(p),_=Function.prototype.bind;function k(e,t){return _.call(e,t)}var A=function(){function e(e){this.partialObserver=e}return e.prototype.next=function(e){var t=this.partialObserver;if(t.next)try{t.next(e)}catch(e){O(e)}},e.prototype.error=function(e){var t=this.partialObserver;if(t.error)try{t.error(e)}catch(e){O(e)}else O(e)},e.prototype.complete=function(){var e=this.partialObserver;if(e.complete)try{e.complete()}catch(e){O(e)}},e}(),L=function(t){function n(n,r,o){var i,u,c=t.call(this)||this;return e(n)||!n?i={next:null!=n?n:void 0,error:null!=r?r:void 0,complete:null!=o?o:void 0}:c&&b.useDeprecatedNextContext?((u=Object.create(n)).unsubscribe=function(){return c.unsubscribe()},i={next:n.next&&k(n.next,u),error:n.error&&k(n.error,u),complete:n.complete&&k(n.complete,u)}):i=n,c.destination=new A(i),c}return r(n,t),n}(C);function O(e){var t;b.useDeprecatedSynchronousErrorHandling?(t=e,b.useDeprecatedSynchronousErrorHandling&&S&&(S.errorThrown=!0,S.error=t)):w(e)}function P(e,t){var n=b.onStoppedNotification;n&&m.setTimeout((function(){return n(e,t)}))}var j={closed:!0,next:g,error:function(e){throw e},complete:g};function I(e,t,n,r,o){return new R(e,t,n,r,o)}var R=function(e){function t(t,n,r,o,i,u){var c=e.call(this,t)||this;return c.onFinalize=i,c.shouldUnsubscribe=u,c._next=n?function(e){try{n(e)}catch(e){t.error(e)}}:e.prototype._next,c._error=o?function(e){try{o(e)}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._error,c._complete=r?function(){try{r()}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._complete,c}return r(t,e),t.prototype.unsubscribe=function(){var t;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var n=this.closed;e.prototype.unsubscribe.call(this),!n&&(null===(t=this.onFinalize)||void 0===t||t.call(this))}},t}(C);function D(e,n){return t((function(t,r){var o=0;t.subscribe(I(r,(function(t){r.next(e.call(n,t,o++))})))}))}function H(e,n){return t(function(e,t,n,r,o){return function(r,o){var i=n,u=t,c=0;r.subscribe(I(o,(function(t){var n=c++;u=i?e(u,t,n):(i=!0,t)}),(function(){i&&o.next(u),o.complete()})))}}(e,n,arguments.length>=2))}var M="function"==typeof Symbol&&Symbol.observable||"@@observable";function z(e){return e}var F=function(){function t(e){e&&(this._subscribe=e)}return t.prototype.lift=function(e){var n=new t;return n.source=this,n.operator=e,n},t.prototype.subscribe=function(t,n,r){var o,i=this,u=(o=t)&&o instanceof C||function(t){return t&&e(t.next)&&e(t.error)&&e(t.complete)}(o)&&y(o)?t:new L(t,n,r);return T((function(){var e=i,t=e.operator,n=e.source;u.add(t?t.call(u,n):n?i._subscribe(u):i._trySubscribe(u))})),u},t.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(t){e.error(t)}},t.prototype.forEach=function(e,t){var n=this;return new(t=N(t))((function(t,r){var o=new L({next:function(t){try{e(t)}catch(e){r(e),o.unsubscribe()}},error:r,complete:t});n.subscribe(o)}))},t.prototype._subscribe=function(e){var t;return null===(t=this.source)||void 0===t?void 0:t.subscribe(e)},t.prototype[M]=function(){return this},t.prototype.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return(0===(n=e).length?z:1===n.length?n[0]:function(e){return n.reduce((function(e,t){return t(e)}),e)})(this);var n},t.prototype.toPromise=function(e){var t=this;return new(e=N(e))((function(e,n){var r;t.subscribe((function(e){return r=e}),(function(e){return n(e)}),(function(){return e(r)}))}))},t.create=function(e){return new t(e)},t}();function N(e){var t;return null!==(t=null!=e?e:b.Promise)&&void 0!==t?t:Promise}var U=function(e){return e&&"number"==typeof e.length&&"function"!=typeof e};function q(t){return e(null==t?void 0:t.then)}function B(t){return e(t[M])}function G(t){return Symbol.asyncIterator&&e(null==t?void 0:t[Symbol.asyncIterator])}function Y(e){return new TypeError("You provided "+(null!==e&&"object"==typeof e?"an invalid object":"'"+e+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var J="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function W(t){return e(null==t?void 0:t[J])}function X(e){return function(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=n.apply(e,t||[]),i=[];return r={},u("next"),u("throw"),u("return"),r[Symbol.asyncIterator]=function(){return this},r;function u(e){o[e]&&(r[e]=function(t){return new Promise((function(n,r){i.push([e,t,n,r])>1||c(e,t)}))})}function c(e,t){try{(n=o[e](t)).value instanceof a?Promise.resolve(n.value.v).then(s,l):f(i[0][2],n)}catch(e){f(i[0][3],e)}var n}function s(e){c("next",e)}function l(e){c("throw",e)}function f(e,t){e(t),i.shift(),i.length&&c(i[0][0],i[0][1])}}(this,arguments,(function(){var t,n,r;return i(this,(function(o){switch(o.label){case 0:t=e.getReader(),o.label=1;case 1:o.trys.push([1,,9,10]),o.label=2;case 2:return[4,a(t.read())];case 3:return n=o.sent(),r=n.value,n.done?[4,a(void 0)]:[3,5];case 4:return[2,o.sent()];case 5:return[4,a(r)];case 6:return[4,o.sent()];case 7:return o.sent(),[3,2];case 8:return[3,10];case 9:return t.releaseLock(),[7];case 10:return[2]}}))}))}function V(t){return e(null==t?void 0:t.getReader)}function K(t){if(t instanceof F)return t;if(null!=t){if(B(t))return i=t,new F((function(t){var n=i[M]();if(e(n.subscribe))return n.subscribe(t);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(U(t))return o=t,new F((function(e){for(var t=0;t<o.length&&!e.closed;t++)e.next(o[t]);e.complete()}));if(q(t))return r=t,new F((function(e){r.then((function(t){e.closed||(e.next(t),e.complete())}),(function(t){return e.error(t)})).then(null,w)}));if(G(t))return Z(t);if(W(t))return n=t,new F((function(e){var t,r;try{for(var o=u(n),i=o.next();!i.done;i=o.next()){var c=i.value;if(e.next(c),e.closed)return}}catch(e){t={error:e}}finally{try{i&&!i.done&&(r=o.return)&&r.call(o)}finally{if(t)throw t.error}}e.complete()}));if(V(t))return Z(X(t))}var n,r,o,i;throw Y(t)}function Z(e){return new F((function(t){(function(e,t){var n,r,o,c,s,a,l,f;return s=this,a=void 0,f=function(){var s,a;return i(this,(function(i){switch(i.label){case 0:i.trys.push([0,5,6,11]),n=function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,n=e[Symbol.asyncIterator];return n?n.call(e):(e=u(e),t={},r("next"),r("throw"),r("return"),t[Symbol.asyncIterator]=function(){return this},t);function r(n){t[n]=e[n]&&function(t){return new Promise((function(r,o){!function(e,t,n,r){Promise.resolve(r).then((function(t){e({value:t,done:n})}),t)}(r,o,(t=e[n](t)).done,t.value)}))}}}(e),i.label=1;case 1:return[4,n.next()];case 2:if((r=i.sent()).done)return[3,4];if(s=r.value,t.next(s),t.closed)return[2];i.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return a=i.sent(),o={error:a},[3,11];case 6:return i.trys.push([6,,9,10]),r&&!r.done&&(c=n.return)?[4,c.call(n)]:[3,8];case 7:i.sent(),i.label=8;case 8:return[3,10];case 9:if(o)throw o.error;return[7];case 10:return[7];case 11:return t.complete(),[2]}}))},new((l=void 0)||(l=Promise))((function(e,t){function n(e){try{o(f.next(e))}catch(e){t(e)}}function r(e){try{o(f.throw(e))}catch(e){t(e)}}function o(t){var o;t.done?e(t.value):(o=t.value,o instanceof l?o:new l((function(e){e(o)}))).then(n,r)}o((f=f.apply(s,a||[])).next())}))})(e,t).catch((function(e){return t.error(e)}))}))}var Q=Array.isArray,$=new F((function(e){return e.complete()}));function ee(t){return t&&e(t.schedule)}function te(e){return e[e.length-1]}function ne(t){return e(te(t))?t.pop():void 0}function re(e){return ee(te(e))?e.pop():void 0}function oe(e){return new F((function(t){fetch("".concat(e,"/users")).then((function(e){if(!e.ok)throw new Error("Greška prilikom dohvatanja korisnika.");return e.json()})).then((function(e){(Array.isArray(e)?e:[e]).forEach((function(e){return t.next(e)})),t.complete()})).catch((function(e){return t.error(e)}))}))}function ie(e,t,n,r,o){void 0===r&&(r=0),void 0===o&&(o=!1);var i=t.schedule((function(){n(),o?e.add(this.schedule(null,r)):this.unsubscribe()}),r);if(e.add(i),!o)return i}function ue(n,r,o){return void 0===o&&(o=1/0),e(r)?ue((function(e,t){return D((function(n,o){return r(e,n,t,o)}))(K(n(e,t)))}),o):("number"==typeof r&&(o=r),t((function(e,t){return function(e,t,n,r,o,i,u,c){var s=[],a=0,l=0,f=!1,d=function(){!f||s.length||a||t.complete()},p=function(e){return a<r?h(e):s.push(e)},h=function(e){a++;var o=!1;K(n(e,l++)).subscribe(I(t,(function(e){t.next(e)}),(function(){o=!0}),void 0,(function(){if(o)try{a--;for(;s.length&&a<r;)e=void 0,e=s.shift(),h(e);d()}catch(e){t.error(e)}var e})))};return e.subscribe(I(t,p,(function(){f=!0,d()}))),function(){}}(e,t,n,o)})))}var ce=Array.isArray;function se(e){return D((function(t){return function(e,t){return ce(t)?e.apply(void 0,s([],c(t))):e(t)}(e,t)}))}var ae=["addListener","removeListener"],le=["addEventListener","removeEventListener"],fe=["on","off"];function de(t,n,r,o){if(e(r)&&(o=r,r=void 0),o)return de(t,n,r).pipe(se(o));var i=c(function(t){return e(t.addEventListener)&&e(t.removeEventListener)}(t)?le.map((function(e){return function(o){return t[e](n,o,r)}})):function(t){return e(t.addListener)&&e(t.removeListener)}(t)?ae.map(pe(t,n)):function(t){return e(t.on)&&e(t.off)}(t)?fe.map(pe(t,n)):[],2),u=i[0],s=i[1];if(!u&&U(t))return ue((function(e){return de(e,n,r)}))(K(t));if(!u)throw new TypeError("Invalid event target");return new F((function(e){var t=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return e.next(1<t.length?t:t[0])};return u(t),function(){return s(t)}}))}function pe(e,t){return function(n){return function(r){return e[n](t,r)}}}var he=l((function(e){return function(){e(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}})),ye=function(e){function t(){var t=e.call(this)||this;return t.closed=!1,t.currentObservers=null,t.observers=[],t.isStopped=!1,t.hasError=!1,t.thrownError=null,t}return r(t,e),t.prototype.lift=function(e){var t=new ve(this,this);return t.operator=e,t},t.prototype._throwIfClosed=function(){if(this.closed)throw new he},t.prototype.next=function(e){var t=this;T((function(){var n,r;if(t._throwIfClosed(),!t.isStopped){t.currentObservers||(t.currentObservers=Array.from(t.observers));try{for(var o=u(t.currentObservers),i=o.next();!i.done;i=o.next())i.value.next(e)}catch(e){n={error:e}}finally{try{i&&!i.done&&(r=o.return)&&r.call(o)}finally{if(n)throw n.error}}}}))},t.prototype.error=function(e){var t=this;T((function(){if(t._throwIfClosed(),!t.isStopped){t.hasError=t.isStopped=!0,t.thrownError=e;for(var n=t.observers;n.length;)n.shift().error(e)}}))},t.prototype.complete=function(){var e=this;T((function(){if(e._throwIfClosed(),!e.isStopped){e.isStopped=!0;for(var t=e.observers;t.length;)t.shift().complete()}}))},t.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=this.currentObservers=null},Object.defineProperty(t.prototype,"observed",{get:function(){var e;return(null===(e=this.observers)||void 0===e?void 0:e.length)>0},enumerable:!1,configurable:!0}),t.prototype._trySubscribe=function(t){return this._throwIfClosed(),e.prototype._trySubscribe.call(this,t)},t.prototype._subscribe=function(e){return this._throwIfClosed(),this._checkFinalizedStatuses(e),this._innerSubscribe(e)},t.prototype._innerSubscribe=function(e){var t=this,n=this,r=n.hasError,o=n.isStopped,i=n.observers;return r||o?h:(this.currentObservers=null,i.push(e),new p((function(){t.currentObservers=null,d(i,e)})))},t.prototype._checkFinalizedStatuses=function(e){var t=this,n=t.hasError,r=t.thrownError,o=t.isStopped;n?e.error(r):o&&e.complete()},t.prototype.asObservable=function(){var e=new F;return e.source=this,e},t.create=function(e,t){return new ve(e,t)},t}(F),ve=function(e){function t(t,n){var r=e.call(this)||this;return r.destination=t,r.source=n,r}return r(t,e),t.prototype.next=function(e){var t,n;null===(n=null===(t=this.destination)||void 0===t?void 0:t.next)||void 0===n||n.call(t,e)},t.prototype.error=function(e){var t,n;null===(n=null===(t=this.destination)||void 0===t?void 0:t.error)||void 0===n||n.call(t,e)},t.prototype.complete=function(){var e,t;null===(t=null===(e=this.destination)||void 0===e?void 0:e.complete)||void 0===t||t.call(e)},t.prototype._subscribe=function(e){var t,n;return null!==(n=null===(t=this.source)||void 0===t?void 0:t.subscribe(e))&&void 0!==n?n:h},t}(ye);var be=function(e,t,n){if(n||2===arguments.length)for(var r,o=0,i=t.length;o<i;o++)!r&&o in t||(r||(r=Array.prototype.slice.call(t,0,o)),r[o]=t[o]);return e.concat(r||Array.prototype.slice.call(t))},me=oe("http://localhost:3000"),we=me.pipe(D((function(e){return e.ime})),H((function(e,t){return be(be([],e,!0),[t],!1)}),[])),ge=me.pipe(D((function(e){return Object.values(e.dani)})),H((function(e,t){return be(be([],e,!0),[t],!1)}),[]));function xe(){var e=document.createElement("div");e.style.width="100%",e.style.marginTop="10px",e.style.display="flex",e.style.flexDirection="row-reverse",e.style.flexWrap="wrap",function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=ne(e),r=function(e){return 1===e.length&&Q(e[0])?e[0]:e}(e);return r.length?new F((function(e){var t=r.map((function(){return[]})),o=r.map((function(){return!1}));e.add((function(){t=o=null}));for(var i=function(i){K(r[i]).subscribe(I(e,(function(r){if(t[i].push(r),t.every((function(e){return e.length}))){var u=t.map((function(e){return e.shift()}));e.next(n?n.apply(void 0,s([],c(u))):u),t.some((function(e,t){return!e.length&&o[t]}))&&e.complete()}}),(function(){o[i]=!0,!t[i].length&&e.complete()})))},u=0;!e.closed&&u<r.length;u++)i(u);return function(){t=o=null}})):$}(we,ge).subscribe((function(n){var r,o,i=n[0],u=n[1],c=-1;i.forEach((function(t,n){if(n<10){c=n;var r=document.createElement("label");r.style.fontSize="30px",r.style.margin="20px",r.style.fontFamily="'Brush Script MT', cursive",r.style.color="#343434",r.innerHTML="• "+t,u[n].forEach((function(e,t){if(e>0){var n=document.querySelector("#dan".concat(t)),o=n.style.backgroundColor;r.addEventListener("mouseover",(function(){n.style.backgroundColor="hsl(225, 100%, 80%)"})),r.addEventListener("mouseout",(function(){n.style.backgroundColor=o}))}})),e.appendChild(r)}})),c>=0&&(r=e,(o=document.createElement("img")).src="../slike/trash.png",o.style.cursor="pointer",o.style.width="50px",o.style.height="50px",o.style.marginTop="10px",o.style.opacity="0.7",o.addEventListener("mouseover",(function(){o.style.opacity="1"})),o.addEventListener("mouseout",(function(){o.style.opacity="0.7"})),r.appendChild(o),de(o,"click").subscribe((function(e){var n,r;(n="http://localhost:3000",r=new ye,new Promise((function(e,o){var i,u;oe(n).pipe((u=function(e){return null!=e},t((function(e,t){var n=0;e.subscribe(I(t,(function(e){return u.call(void 0,e,n++)&&t.next(e)})))}))),(i=r,t((function(e,t){K(i).subscribe(I(t,(function(){return t.complete()}),g)),!t.closed&&e.subscribe(t)})))).subscribe((function(e){(function(e,t){var n="".concat(t,"/users/").concat(e);return new Promise((function(e,t){fetch(n,{method:"DELETE"}).then((function(n){n.ok||t("greska"),e(n)})).catch((function(e){return t(e)}))}))})(e.id,n).then((function(){})).catch((function(e){}))}))}))).then((function(){})).catch((function(e){}))})))}));var n=document.createElement("div");n.style.width="100%",n.style.height="1px",n.style.backgroundColor="#e6e6e6",n.style.marginTop="50px",document.body.appendChild(n),document.body.appendChild(e)}function Ee(e,n){return t((function(t,r){var o=null,i=0,u=!1,c=function(){return u&&!o&&r.complete()};t.subscribe(I(r,(function(t){null==o||o.unsubscribe();var u=0,s=i++;K(e(t,s)).subscribe(o=I(r,(function(e){return r.next(n?n(t,e,s,u++):e)}),(function(){o=null,c()})))}),(function(){u=!0,c()})))}))}function Se(e,n){return void 0===n&&(n=0),t((function(t,r){t.subscribe(I(r,(function(t){return ie(r,e,(function(){return r.next(t)}),n)}),(function(){return ie(r,e,(function(){return r.complete()}),n)}),(function(t){return ie(r,e,(function(){return r.error(t)}),n)})))}))}function Te(e,n){return void 0===n&&(n=0),t((function(t,r){r.add(e.schedule((function(){return t.subscribe(r)}),n))}))}function Ce(e,t){if(!e)throw new Error("Iterable cannot be null");return new F((function(n){ie(n,t,(function(){var r=e[Symbol.asyncIterator]();ie(n,t,(function(){r.next().then((function(e){e.done?n.complete():n.next(e.value)}))}),0,!0)}))}))}function _e(t,n){return n?function(t,n){if(null!=t){if(B(t))return function(e,t){return K(e).pipe(Te(t),Se(t))}(t,n);if(U(t))return function(e,t){return new F((function(n){var r=0;return t.schedule((function(){r===e.length?n.complete():(n.next(e[r++]),n.closed||this.schedule())}))}))}(t,n);if(q(t))return function(e,t){return K(e).pipe(Te(t),Se(t))}(t,n);if(G(t))return Ce(t,n);if(W(t))return function(t,n){return new F((function(r){var o;return ie(r,n,(function(){o=t[J](),ie(r,n,(function(){var e,t,n;try{t=(e=o.next()).value,n=e.done}catch(e){return void r.error(e)}n?r.complete():r.next(t)}),0,!0)})),function(){return e(null==o?void 0:o.return)&&o.return()}}))}(t,n);if(V(t))return function(e,t){return Ce(X(e),t)}(t,n)}throw Y(t)}(t,n):K(t)}var ke=[0,0,0,0,0,0,0],Ae=(new Date).getDay();function Le(e){return void 0===e&&(e=1/0),ue(z,e)}function Oe(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return Le(1)(_e(e,re(e)))}function Pe(n,r,o){var i=e(n)||r||o?{next:n,error:r,complete:o}:n;return i?t((function(e,t){var n;null===(n=i.subscribe)||void 0===n||n.call(i);var r=!0;e.subscribe(I(t,(function(e){var n;null===(n=i.next)||void 0===n||n.call(i,e),t.next(e)}),(function(){var e;r=!1,null===(e=i.complete)||void 0===e||e.call(i),t.complete()}),(function(e){var n;r=!1,null===(n=i.error)||void 0===n||n.call(i,e),t.error(e)}),(function(){var e,t;r&&(null===(e=i.unsubscribe)||void 0===e||e.call(i)),null===(t=i.finalize)||void 0===t||t.call(i)})))})):z}var je=function(e){function t(t,n){return e.call(this)||this}return r(t,e),t.prototype.schedule=function(e,t){return void 0===t&&(t=0),this},t}(p),Ie={setInterval:function(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var o=Ie.delegate;return(null==o?void 0:o.setInterval)?o.setInterval.apply(o,s([e,t],c(n))):setInterval.apply(void 0,s([e,t],c(n)))},clearInterval:function(e){var t=Ie.delegate;return((null==t?void 0:t.clearInterval)||clearInterval)(e)},delegate:void 0},Re=function(e){function t(t,n){var r=e.call(this,t,n)||this;return r.scheduler=t,r.work=n,r.pending=!1,r}return r(t,e),t.prototype.schedule=function(e,t){var n;if(void 0===t&&(t=0),this.closed)return this;this.state=e;var r=this.id,o=this.scheduler;return null!=r&&(this.id=this.recycleAsyncId(o,r,t)),this.pending=!0,this.delay=t,this.id=null!==(n=this.id)&&void 0!==n?n:this.requestAsyncId(o,this.id,t),this},t.prototype.requestAsyncId=function(e,t,n){return void 0===n&&(n=0),Ie.setInterval(e.flush.bind(e,this),n)},t.prototype.recycleAsyncId=function(e,t,n){if(void 0===n&&(n=0),null!=n&&this.delay===n&&!1===this.pending)return t;null!=t&&Ie.clearInterval(t)},t.prototype.execute=function(e,t){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var n=this._execute(e,t);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},t.prototype._execute=function(e,t){var n,r=!1;try{this.work(e)}catch(e){r=!0,n=e||new Error("Scheduled action threw falsy error")}if(r)return this.unsubscribe(),n},t.prototype.unsubscribe=function(){if(!this.closed){var t=this.id,n=this.scheduler,r=n.actions;this.work=this.state=this.scheduler=null,this.pending=!1,d(r,this),null!=t&&(this.id=this.recycleAsyncId(n,t,null)),this.delay=null,e.prototype.unsubscribe.call(this)}},t}(je),De={now:function(){return(De.delegate||Date).now()},delegate:void 0},He=function(){function e(t,n){void 0===n&&(n=e.now),this.schedulerActionCtor=t,this.now=n}return e.prototype.schedule=function(e,t,n){return void 0===t&&(t=0),new this.schedulerActionCtor(this,e).schedule(n,t)},e.now=De.now,e}(),Me=new(function(e){function t(t,n){void 0===n&&(n=He.now);var r=e.call(this,t,n)||this;return r.actions=[],r._active=!1,r}return r(t,e),t.prototype.flush=function(e){var t=this.actions;if(this._active)t.push(e);else{var n;this._active=!0;do{if(n=e.execute(e.state,e.delay))break}while(e=t.shift());if(this._active=!1,n){for(;e=t.shift();)e.unsubscribe();throw n}}},t}(He))(Re),ze=Me;var Fe=Array.isArray,Ne=Object.getPrototypeOf,Ue=Object.prototype,qe=Object.keys;function Be(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=re(e),r=ne(e),o=function(e){if(1===e.length){var t=e[0];if(Fe(t))return{args:t,keys:null};if((r=t)&&"object"==typeof r&&Ne(r)===Ue){var n=qe(t);return{args:n.map((function(e){return t[e]})),keys:n}}}var r;return{args:e,keys:null}}(e),i=o.args,u=o.keys;if(0===i.length)return _e([],n);var c=new F(function(e,t,n){return void 0===n&&(n=z),function(r){Ge(t,(function(){for(var o=e.length,i=new Array(o),u=o,c=o,s=function(o){Ge(t,(function(){var s=_e(e[o],t),a=!1;s.subscribe(I(r,(function(e){i[o]=e,a||(a=!0,c--),c||r.next(n(i.slice()))}),(function(){--u||r.complete()})))}),r)},a=0;a<o;a++)s(a)}),r)}}(i,n,u?function(e){return function(e,t){return e.reduce((function(e,n,r){return e[n]=t[r],e}),{})}(u,e)}:z));return r?c.pipe(se(r)):c}function Ge(e,t,n){e?ie(n,e,t):t()}function Ye(e){switch(e.responseType){case"json":if("response"in e)return e.response;var t=e;return JSON.parse(t.responseText);case"document":return e.responseXML;default:return"response"in e?e.response:(t=e).responseText}}var Je=function(e,t,n,r){void 0===r&&(r="download_load"),this.originalEvent=e,this.xhr=t,this.request=n,this.type=r;var o=t.status,i=t.responseType;this.status=null!=o?o:0,this.responseType=null!=i?i:"";var u=t.getAllResponseHeaders();this.responseHeaders=u?u.split("\n").reduce((function(e,t){var n=t.indexOf(": ");return e[t.slice(0,n)]=t.slice(n+2),e}),{}):{},this.response=Ye(t);var c=e.loaded,s=e.total;this.loaded=c,this.total=s},We=l((function(e){return function(e,t,n){var r;this.message=e,this.name="AjaxError",this.xhr=t,this.request=n,this.status=t.status,this.responseType=t.responseType;try{r=Ye(t)}catch(e){r=t.responseText}this.response=r}})),Xe=function(){function e(e,t){return We.call(this,"ajax timeout",e,t),this.name="AjaxTimeoutError",this}return e.prototype=Object.create(We.prototype),e}();var Ve=D((function(e){return e.response}));var Ke,Ze=(Ke=function(e){var t;return t="string"==typeof e?{url:e}:e,new F((function(e){var n,r,i,u=o({async:!0,crossDomain:!1,withCredentials:!1,method:"GET",timeout:0,responseType:"json"},t),c=u.queryParams,s=u.body,a=u.headers,l=u.url;if(!l)throw new TypeError("url is required");if(c)if(l.includes("?")){var f=l.split("?");if(2<f.length)throw new TypeError("invalid url");i=new URLSearchParams(f[1]),new URLSearchParams(c).forEach((function(e,t){return i.set(t,e)})),l=f[0]+"?"+i}else l=l+"?"+(i=new URLSearchParams(c));var d={};if(a)for(var p in a)a.hasOwnProperty(p)&&(d[p.toLowerCase()]=a[p]);var h=u.crossDomain;h||"x-requested-with"in d||(d["x-requested-with"]="XMLHttpRequest");var y=u.withCredentials,v=u.xsrfCookieName,b=u.xsrfHeaderName;if((y||!h)&&v&&b){var m=null!==(r=null===(n=null===document||void 0===document?void 0:document.cookie.match(new RegExp("(^|;\\s*)("+v+")=([^;]*)")))||void 0===n?void 0:n.pop())&&void 0!==r?r:"";m&&(d[b]=m)}var w,g=function(e,t){var n;if(!e||"string"==typeof e||function(e){return"undefined"!=typeof FormData&&e instanceof FormData}(e)||function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams}(e)||function(e){return ot(e,"ArrayBuffer")}(e)||function(e){return ot(e,"File")}(e)||function(e){return ot(e,"Blob")}(e)||function(e){return"undefined"!=typeof ReadableStream&&e instanceof ReadableStream}(e))return e;if(function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView(e)}(e))return e.buffer;if("object"==typeof e)return t["content-type"]=null!==(n=t["content-type"])&&void 0!==n?n:"application/json;charset=utf-8",JSON.stringify(e);throw new TypeError("Unknown body type")}(s,d),x=o(o({},u),{url:l,headers:d,body:g});w=t.createXHR?t.createXHR():new XMLHttpRequest;var E=t.progressSubscriber,S=t.includeDownloadProgress,T=void 0!==S&&S,C=t.includeUploadProgress,_=void 0!==C&&C,k=function(t,n){w.addEventListener(t,(function(){var t,r=n();null===(t=null==E?void 0:E.error)||void 0===t||t.call(E,r),e.error(r)}))};k("timeout",(function(){return new Xe(w,x)})),k("abort",(function(){return new We("aborted",w,x)}));var A=function(e,t){return new Je(t,w,x,e+"_"+t.type)},L=function(t,n,r){t.addEventListener(n,(function(t){e.next(A(r,t))}))};_&&[et,tt,nt].forEach((function(e){return L(w.upload,e,Qe)})),E&&[et,tt].forEach((function(e){return w.upload.addEventListener(e,(function(e){var t;return null===(t=null==E?void 0:E.next)||void 0===t?void 0:t.call(E,e)}))})),T&&[et,tt].forEach((function(e){return L(w,e,$e)}));var O=function(t){var n="ajax error"+(t?" "+t:"");e.error(new We(n,w,x))};w.addEventListener("error",(function(e){var t;null===(t=null==E?void 0:E.error)||void 0===t||t.call(E,e),O()})),w.addEventListener(nt,(function(t){var n,r,o=w.status;if(o<400){null===(n=null==E?void 0:E.complete)||void 0===n||n.call(E);var i=void 0;try{i=A($e,t)}catch(t){return void e.error(t)}e.next(i),e.complete()}else null===(r=null==E?void 0:E.error)||void 0===r||r.call(E,t),O(o)}));var P=x.user,j=x.method,I=x.async;for(var p in P?w.open(j,l,I,P,x.password):w.open(j,l,I),I&&(w.timeout=x.timeout,w.responseType=x.responseType),"withCredentials"in w&&(w.withCredentials=x.withCredentials),d)d.hasOwnProperty(p)&&w.setRequestHeader(p,d[p]);return g?w.send(g):w.send(),function(){w&&4!==w.readyState&&w.abort()}}))},Ke.get=function(e,t){return Ze({method:"GET",url:e,headers:t})},Ke.post=function(e,t,n){return Ze({method:"POST",url:e,body:t,headers:n})},Ke.delete=function(e,t){return Ze({method:"DELETE",url:e,headers:t})},Ke.put=function(e,t,n){return Ze({method:"PUT",url:e,body:t,headers:n})},Ke.patch=function(e,t,n){return Ze({method:"PATCH",url:e,body:t,headers:n})},Ke.getJSON=function(e,t){return Ve(Ze({method:"GET",url:e,headers:t}))},Ke),Qe="upload",$e="download",et="loadstart",tt="progress",nt="load",rt=Object.prototype.toString;function ot(e,t){return rt.call(e)==="[object "+t+"]"}var it=[0,0,0,0,0,0,0],ut=me.pipe(10<=0?function(){return $}:t((function(e,t){var n=0;e.subscribe(I(t,(function(e){++n<=10&&(t.next(e),10<=n&&t.complete())})))})),D((function(e){return e.dani})),function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];var r=re(e);return t((function(t,n){(r?Oe(e,t,r):Oe(e,t)).subscribe(n)}))}([0,0,0,0,0,0,0])),ct=new ye;(function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=re(e),r=function(e,t){return"number"==typeof te(e)?e.pop():1/0}(e),o=e;return o.length?1===o.length?K(o[0]):Le(r)(_e(o,n)):$})(ut).pipe(Pe((function(e){ct.next(function(e,t,n){if(n||2===arguments.length)for(var r,o=0,i=t.length;o<i;o++)!r&&o in t||(r||(r=Array.prototype.slice.call(t,0,o)),r[o]=t[o]);return e.concat(r||Array.prototype.slice.call(t))}([],it,!0))}))).subscribe();var st,at,lt=(st=36e5,void 0===st&&(st=0),void 0===at&&(at=Me),st<0&&(st=0),function(e,t,n){void 0===e&&(e=0),void 0===n&&(n=ze);var r=-1;return null!=t&&(ee(t)?n=t:r=t),new F((function(t){var o,i=(o=e)instanceof Date&&!isNaN(o)?+e-n.now():e;i<0&&(i=0);var u=0;return n.schedule((function(){t.closed||(t.next(u++),0<=r?this.schedule(void 0,r):t.complete())}),i)}))}(st,st,at)).pipe(Ee((function(){return Ze.getJSON("https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/Ni%C5%A1%2C%20Serbia?unitGroup=metric&key=JV2CAGVLA6Y38ZCT8CD4YNKWN&contentType=json")}))).pipe(D((function(e){return e.days.slice(1).map((function(e){return{date:e.datetime,maxTemp:e.tempmax,minTemp:e.tempmin,icon:e.icon}}))})));!function(){var e=document.createElement("div");e.style.backgroundColor="#ffccff",e.style.borderRadius="50px",e.style.padding="20px",e.style.paddingLeft="40px",e.style.margin="15px",e.style.marginTop="0px",e.style.marginBottom="30px",document.body.appendChild(e);var t=document.createElement("div");t.style.display="flex";var n=document.createElement("label");n.innerHTML="Your name: ",n.style.fontFamily="'Trebuchet MS', sans-serif",n.style.fontSize="25px",t.appendChild(n);var r=document.createElement("input");r.style.fontSize="25px",r.style.fontFamily="'Trebuchet MS', sans-serif",r.style.borderRadius="50px",r.style.paddingLeft="10px",r.style.color="#b300b3";var o=document.createElement("label");o.innerHTML="Help",o.style.marginLeft="20px",o.style.marginTop="5px",o.style.fontSize="20px",o.style.textDecoration="underline",o.style.cursor="pointer",o.style.fontFamily="'Trebuchet MS', sans-serif";var i=document.createElement("div");i.innerHTML="Schedule supports a maximum of 10 users per Date.",i.style.display="none",i.style.backgroundColor="black",i.style.opacity="70%",i.style.borderTopLeftRadius="15px",i.style.borderTopRightRadius="15px",i.style.borderBottomRightRadius="15px",i.style.color="white",i.style.width="400px",i.style.marginLeft="20px",o.addEventListener("mouseover",(function(){o.style.color="black",i.style.display="flex",i.style.flexDirection="row",i.style.justifyContent="center",i.style.alignItems="center"})),o.addEventListener("mouseout",(function(){o.style.color="#b300b3",i.style.display="none"})),t.appendChild(r),t.appendChild(o),t.appendChild(i),e.appendChild(t);var u=document.createElement("div");u.style.display="flex",u.style.justifyContent="center",u.appendChild(function(){var e=["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"],t=document.createElement("div");t.style.display="flex",t.style.flexDirection="row",t.style.marginTop="20px";for(var n=function(e){var n=document.createElement("div");n.style.display="flex",n.style.flexDirection="column",n.style.margin="17px";var r=document.createElement("INPUT");r.setAttribute("type","checkbox"),r.style.height="25px",r.style.accentColor="#b300b3",r.style.cursor="pointer",n.appendChild(r),de(r,"click").pipe(D((function(e){return e.target.checked?1:0}))).subscribe((function(t){ke[e]=t}));var o=document.createElement("label");o.setAttribute("id","d"+e),o.style.fontSize="23px",o.style.fontFamily="'Trebuchet MS', sans-serif";var i=document.createElement("label");i.setAttribute("id","p"+e),n.appendChild(o),n.appendChild(i),t.appendChild(n),7==++Ae&&(Ae=0)},r=0;r<7;r++)n(r);return _e(e).pipe(D((function(t,n){return e[(Ae+n)%7]}))),t}()),e.appendChild(u),e.appendChild(function(e){var t=document.createElement("div");t.style.display="flex",t.style.justifyContent="right",t.style.marginRight="100px";var n=document.createElement("button");return n.innerHTML="Submit",n.style.fontSize="25px",n.style.fontFamily="'Trebuchet MS', sans-serif",n.style.padding="8px",n.style.paddingRight="12px",n.style.paddingLeft="12px",n.style.borderRadius="50px",n.style.borderColor="white",n.style.color="white",n.style.cursor="pointer",n.style.backgroundColor="black",n.style.opacity="50%",t.appendChild(n),n.addEventListener("mouseout",(function(){n.style.backgroundColor="black",n.style.opacity="50%"})),n.addEventListener("mouseover",(function(){n.style.backgroundColor="#b300b3",n.style.opacity="1"})),de(n,"click").pipe(D((function(){return e.value||prompt("Please enter your name:","Harry Potter")})),Ee((function(e){var t={};return ke.forEach((function(e,n){t[n]=e})),function(e,t){return new Promise((function(n,r){fetch("http://localhost:3000/users",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({ime:e,dani:t})}).then((function(e){if(!e.ok)throw new Error("Greška prilikom slanja podataka na server.");return e.json()})).then((function(e){return n(e)})).catch((function(e){return r(e)}))}))}(e,t)}))).subscribe((function(e){})),t}(r));var c=document.createElement("div");c.style.width="100%",c.style.height="1px",c.style.backgroundColor="#e6e6e6",c.style.marginBottom="20px",document.body.appendChild(c);var s=document.createElement("div");s.style.display="flex",s.style.flexDirection="row",s.style.width="60%",s.style.marginLeft="20%";var a=document.createElement("div");a.style.display="flex",a.style.justifyContent="center",a.style.marginBottom="10px";var l=document.createElement("label");l.style.fontFamily="'Brush Script MT', cursive",l.innerHTML="Schedule",l.style.color="#343434",l.style.fontSize="70px",a.appendChild(l),document.body.appendChild(a),document.body.appendChild(s),function(e){for(var t,n=["M","T","W","T","F","S","S"],r=0;r<7;r++){var o=document.createElement("div");o.style.border="3px solid white",o.style.height="80px",o.style.width="14%",o.classList.add("dan-div"),o.setAttribute("id","dan"+r);var i=document.createElement("label");i.innerHTML=n[(Ae+r)%7],i.style.margin="5px",i.style.fontFamily="'Trebuchet MS', sans-serif",i.style.fontSize="25px",o.appendChild(i),e.appendChild(o)}lt.subscribe((function(e){t=e.map((function(e){return e.maxTemp})),console.log("ovde")})),Be([ct,ut]).pipe(Pe((function(e){var n=e[0],r=e[1];n.forEach((function(e,t){n[t]+=r[t]})),document.querySelectorAll(".dan-div").forEach((function(e,r){if(n[r]>0){var o=100-10*n[r];e.style.backgroundColor="hsl(300, 100%, "+o+"%)"}else e.style.backgroundColor="#e6e6e6";var i=document.createElement("label");i.innerHTML=t[r]+"",e.appendChild(i)}))}))).subscribe()}(s),xe()}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,